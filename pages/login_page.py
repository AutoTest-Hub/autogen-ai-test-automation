"""
Login Page Object
Generated by Enhanced AutoGen Test Creation Agent
"""

from playwright.sync_api import Page
import logging
from utils.locator_strategy import LocatorStrategy

class LoginPage:
    """Page object for Login"""
    
    def __init__(self, page: Page):
        self.page = page
        self.url = "https://opensource-demo.orangehrmlive.com/web/index.php/auth/login"  # Dynamic URL from discovery
        self.locator_strategy = LocatorStrategy(page)
        
        # Element selectors discovered from application analysis
        # Application-agnostic page object using LocatorStrategy
        # No hardcoded method assumptions - use LocatorStrategy directly
        
    def navigate(self):
        """Navigate to this page"""
        self.page.goto(self.url)
        self.page.wait_for_load_state("networkidle")
        
    def fill_field(self, semantic_type: str, value: str) -> bool:
        """Fill any field using semantic type and LocatorStrategy"""
        return self.locator_strategy.fill(semantic_type, value)
        
    def click_element(self, semantic_type: str) -> bool:
        """Click any element using semantic type and LocatorStrategy"""
        return self.locator_strategy.click(semantic_type)
        
    def is_element_visible(self, semantic_type: str) -> bool:
        """Check if element is visible using semantic type and LocatorStrategy"""
        return self.locator_strategy.is_visible(semantic_type)
        
    def get_element_text(self, semantic_type: str) -> str:
        """Get text from element using semantic type and LocatorStrategy"""
        return self.locator_strategy.get_text(semantic_type)
        
    def wait_for_element(self, semantic_type: str, timeout: int = 10000) -> bool:
        """Wait for element to appear using semantic type and LocatorStrategy"""
        return self.locator_strategy.wait_for_element(semantic_type, timeout)
