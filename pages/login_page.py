"""
Login Page Object
Generated by Enhanced AutoGen Test Creation Agent
"""

from playwright.sync_api import Page
import logging
from utils.locator_strategy import LocatorStrategy

class LoginPage:
    """Page object for Login"""
    
    def __init__(self, page: Page):
        self.page = page
        self.url = "https://opensource-demo.orangehrmlive.com/web/index.php/auth/login"
        self.locator_strategy = LocatorStrategy(page)
        
        # Element selectors discovered from application analysis
        # Using LocatorStrategy for robust element finding
        # Fallback selectors are handled automatically by LocatorStrategy
        
    def navigate(self):
        """Navigate to Login"""
        self.page.goto(self.url)
        self.page.wait_for_load_state("networkidle")
        
    def fill_username(self, username: str):
        """Fill username field using LocatorStrategy"""
        success = self.locator_strategy.fill("username_field", username)
        if not success:
            # Fallback to direct selector if LocatorStrategy fails
            self.page.fill("input[name='username']", username)
        
    def fill_password(self, password: str):
        """Fill password field using LocatorStrategy"""
        success = self.locator_strategy.fill("password_field", password)
        if not success:
            # Fallback to direct selector if LocatorStrategy fails
            self.page.fill("input[name='password']", password)
        
    def click_login(self):
        """Click login button using LocatorStrategy"""
        success = self.locator_strategy.click("login_button")
        if not success:
            # Fallback to direct selector if LocatorStrategy fails
            self.page.click("button[type='submit']")
        
    def login(self, username: str, password: str):
        """Perform complete login using LocatorStrategy"""
        self.fill_username(username)
        self.fill_password(password)
        self.click_login()
