"""
Test Invalid Login with Error Validation
Generated by Enhanced AutoGen Test Creation Agent
Page Object Pattern Test - Uses page object models
"""

import pytest
import logging
from datetime import datetime
from pages.login_page import LoginPage
from pages.dashboard_page import DashboardPage

class TestInvalidLoginWithErrorValidation:
    """Test class for Invalid Login with Error Validation"""
    
    def test_invalid_login_with_error_validation(self, browser_setup):
        """
        Test: Invalid Login with Error Validation
        Description: Test login with invalid credentials and verify error handling
        """
        page, browser, context = browser_setup
        
        # Test data from requirements.json
        test_data = {'valid_username': 'Admin', 'valid_password': 'admin123', 'invalid_username': 'InvalidUser', 'invalid_password': 'WrongPassword123', 'base_url': 'https://opensource-demo.orangehrmlive.com'}
        
        try:
            # Get application URL
            app_url = test_data.get("base_url")
            if not app_url:
                raise ValueError("No application URL provided. Please specify base_url in test data.")
            
            # Initialize page objects
            login_page = LoginPage(page)
            dashboard_page = DashboardPage(page)
            # Step 1: Navigate to login page
            login_page.navigate()
            logging.info("Navigation step completed")
            # Step 2: Enter invalid username
            # Enter invalid username using page object
            username_value = test_data.get("invalid_username")
            if not username_value:
                raise ValueError("Invalid username not provided in test data")
            success = login_page.fill_field("username_field", username_value)
            if not success:
                raise AssertionError("Could not find or fill username field using page object")
            page.wait_for_timeout(200)
            # Step 3: Enter invalid password
            # Enter invalid password using page object
            password_value = test_data.get("invalid_password")
            if not password_value:
                raise ValueError("Invalid password not provided in test data")
            success = login_page.fill_field("password_field", password_value)
            if not success:
                raise AssertionError("Could not find or fill password field using page object")
            page.wait_for_timeout(200)
            # Step 4: Click login button
            # Click login button using page object
            success = login_page.click_element("login_button")
            if not success:
                raise AssertionError("Could not find or click login button using page object")
            page.wait_for_load_state("networkidle")

            # Validations using page objects
            # Verify error message using page object
            # Wait for error message to appear
            page.wait_for_timeout(2000)
            error_found = False
            
            # Try login page first (error messages typically appear on login page)
            try:
                is_visible = login_page.is_element_visible("error_message")
                if is_visible:
                    error_found = True
                    logging.info("Error message validation passed using login_page")
                else:
                    logging.debug("Error message not visible on login_page")
            except Exception as e:
                logging.debug(f"Failed to find error_message on login_page: {e}")
            
            # Fallback to dashboard page if not found on login page
            if not error_found:
                try:
                    is_visible = dashboard_page.is_element_visible("error_message")
                    if is_visible:
                        error_found = True
                        logging.info("Error message validation passed using dashboard_page")
                    else:
                        logging.debug("Error message not visible on dashboard_page")
                except Exception as e:
                    logging.debug(f"Failed to find error_message on dashboard_page: {e}")
            
            # Final assertion with more informative error message
            if not error_found:
                logging.error("Error message not found on any page - this might indicate the application doesn't show error messages as expected")
            assert error_found, "Error message not displayed on any page"
            
            # Generic validation: Verify URL contains '/login'
            logging.info("Validation: Verify URL contains '/login'")
            
            # Generic validation: Verify user remains on login page
            logging.info("Validation: Verify user remains on login page")
            

            # Final verification
            page.wait_for_timeout(1000)  # Allow UI to settle
            
            logging.info(f"Test invalid_login_with_error_validation completed successfully")
            
        except Exception as e:
            logging.error(f"Test invalid_login_with_error_validation failed: {str(e)}")
            raise
