"""
Test Valid Login with Comprehensive Validations
Generated by Enhanced AutoGen Test Creation Agent
Page Object Pattern Test - Uses page object models
"""

import pytest
import logging
from datetime import datetime
from pages.login_page import LoginPage
from pages.dashboard_page import DashboardPage

class TestValidLoginWithComprehensiveValidations:
    """Test class for Valid Login with Comprehensive Validations"""
    
    def test_valid_login_with_comprehensive_validations(self, browser_setup):
        """
        Test: Valid Login with Comprehensive Validations
        Description: Test login with valid credentials and verify all expected elements
        """
        page, browser, context = browser_setup
        
        # Test data from requirements.json
        test_data = {'valid_username': 'Admin', 'valid_password': 'admin123', 'invalid_username': 'InvalidUser', 'invalid_password': 'WrongPassword123', 'base_url': 'https://opensource-demo.orangehrmlive.com'}
        
        try:
            # Get application URL
            app_url = test_data.get("base_url")
            if not app_url:
                raise ValueError("No application URL provided. Please specify base_url in test data.")
            
            # Initialize page objects
            login_page = LoginPage(page)
            dashboard_page = DashboardPage(page)
            # Step 1: Navigate to login page
            login_page.navigate()
            logging.info("Navigation step completed")
            # Step 2: Enter valid username
            # Enter valid username using page object
            username_value = test_data.get("valid_username") or test_data.get("username")
            if not username_value:
                raise ValueError("Valid username not provided in test data")
            success = login_page.fill_field("username_field", username_value)
            if not success:
                raise AssertionError("Could not find or fill username field using page object")
            page.wait_for_timeout(200)
            # Step 3: Enter valid password
            # Enter valid password using page object
            password_value = test_data.get("valid_password") or test_data.get("password")
            if not password_value:
                raise ValueError("Valid password not provided in test data")
            success = login_page.fill_field("password_field", password_value)
            if not success:
                raise AssertionError("Could not find or fill password field using page object")
            page.wait_for_timeout(200)
            # Step 4: Click login button
            # Click login button using page object
            success = login_page.click_element("login_button")
            if not success:
                raise AssertionError("Could not find or click login button using page object")
            page.wait_for_load_state("networkidle")
            # Step 5: Click user name
            # Click user name using page object (EXACT same logic as direct approach)
            # Use direct LocatorStrategy calls for guaranteed success
            locator_strategy = login_page.locator_strategy
            
            success = False
            
            # Method 1: Try text-based targeting if we have specific text
            if "User" and "User" != "None":
                try:
                    success = locator_strategy.click_by_text("user_display", "User")
                    if success:
                        logging.info(f"Successfully clicked 'User' using text-based targeting")
                except Exception as e:
                    logging.debug(f"Text-based targeting failed: {e}")
            
            # Method 2: Try semantic element targeting (same as direct approach)
            if not success:
                try:
                    success = locator_strategy.click("user_display")
                    if success:
                        logging.info(f"Successfully clicked user_display using semantic targeting")
                except Exception as e:
                    logging.debug(f"Semantic targeting failed: {e}")
            
            # Method 3: Fallback to generic button if nothing else works
            if not success and "user_display" != "button":
                try:
                    success = locator_strategy.click("button")
                    if success:
                        logging.info("Successfully clicked using button fallback")
                except Exception as e:
                    logging.debug(f"Button fallback failed: {e}")
            
            # Final assertion
            if not success:
                logging.error(f"Could not find or click element for step: Click user name")
                raise AssertionError(f"Could not find or click element using any targeting method")
            
            page.wait_for_timeout(500)
            # Step 6: Verify logout option available
            # Generic step using page object: Verify logout option available
            logging.info("Executing step: Verify logout option available")
            page.wait_for_timeout(500)
            # Step 7: Click outside the user name
            # Click outside the user name using page object (EXACT same logic as direct approach)
            # Use direct LocatorStrategy calls for guaranteed success
            locator_strategy = login_page.locator_strategy
            
            success = False
            
            # Method 1: Try text-based targeting if we have specific text
            if "Outside" and "Outside" != "None":
                try:
                    success = locator_strategy.click_by_text("user_display", "Outside")
                    if success:
                        logging.info(f"Successfully clicked 'Outside' using text-based targeting")
                except Exception as e:
                    logging.debug(f"Text-based targeting failed: {e}")
            
            # Method 2: Try semantic element targeting (same as direct approach)
            if not success:
                try:
                    success = locator_strategy.click("user_display")
                    if success:
                        logging.info(f"Successfully clicked user_display using semantic targeting")
                except Exception as e:
                    logging.debug(f"Semantic targeting failed: {e}")
            
            # Method 3: Fallback to generic button if nothing else works
            if not success and "user_display" != "button":
                try:
                    success = locator_strategy.click("button")
                    if success:
                        logging.info("Successfully clicked using button fallback")
                except Exception as e:
                    logging.debug(f"Button fallback failed: {e}")
            
            # Final assertion
            if not success:
                logging.error(f"Could not find or click element for step: Click outside the user name")
                raise AssertionError(f"Could not find or click element using any targeting method")
            
            page.wait_for_timeout(500)

            # Validations using page objects
            # Verify dashboard URL using page object
            current_url = page.url
            assert "/dashboard" in current_url, f"Expected dashboard URL, got: {current_url}"
            logging.info("Dashboard URL validation passed")
            
            # Verify time_widget using page object
            widget_found = False
            
            # Try dashboard page first (widgets are typically on dashboard)
            try:
                is_visible = dashboard_page.is_element_visible("time_widget")
                if is_visible:
                    widget_found = True
                    logging.info("time_widget validation passed using dashboard_page")
            except Exception as e:
                logging.debug(f"Failed to find time_widget on dashboard_page: {e}")
            
            # Fallback to login page if not found on dashboard
            if not widget_found:
                try:
                    is_visible = login_page.is_element_visible("time_widget")
                    if is_visible:
                        widget_found = True
                        logging.info("time_widget validation passed using login_page")
                except Exception as e:
                    logging.debug(f"Failed to find time_widget on login_page: {e}")
            
            # Final assertion
            assert widget_found, f"Widget time_widget not visible on any page"
            
            # Verify actions_widget using page object
            widget_found = False
            
            # Try dashboard page first (widgets are typically on dashboard)
            try:
                is_visible = dashboard_page.is_element_visible("actions_widget")
                if is_visible:
                    widget_found = True
                    logging.info("actions_widget validation passed using dashboard_page")
            except Exception as e:
                logging.debug(f"Failed to find actions_widget on dashboard_page: {e}")
            
            # Fallback to login page if not found on dashboard
            if not widget_found:
                try:
                    is_visible = login_page.is_element_visible("actions_widget")
                    if is_visible:
                        widget_found = True
                        logging.info("actions_widget validation passed using login_page")
                except Exception as e:
                    logging.debug(f"Failed to find actions_widget on login_page: {e}")
            
            # Final assertion
            assert widget_found, f"Widget actions_widget not visible on any page"
            
            # Verify quick_launch_widget using page object
            widget_found = False
            
            # Try dashboard page first (widgets are typically on dashboard)
            try:
                is_visible = dashboard_page.is_element_visible("quick_launch_widget")
                if is_visible:
                    widget_found = True
                    logging.info("quick_launch_widget validation passed using dashboard_page")
            except Exception as e:
                logging.debug(f"Failed to find quick_launch_widget on dashboard_page: {e}")
            
            # Fallback to login page if not found on dashboard
            if not widget_found:
                try:
                    is_visible = login_page.is_element_visible("quick_launch_widget")
                    if is_visible:
                        widget_found = True
                        logging.info("quick_launch_widget validation passed using login_page")
                except Exception as e:
                    logging.debug(f"Failed to find quick_launch_widget on login_page: {e}")
            
            # Final assertion
            assert widget_found, f"Widget quick_launch_widget not visible on any page"
            
            # Verify buzz_widget using page object
            widget_found = False
            
            # Try dashboard page first (widgets are typically on dashboard)
            try:
                is_visible = dashboard_page.is_element_visible("buzz_widget")
                if is_visible:
                    widget_found = True
                    logging.info("buzz_widget validation passed using dashboard_page")
            except Exception as e:
                logging.debug(f"Failed to find buzz_widget on dashboard_page: {e}")
            
            # Fallback to login page if not found on dashboard
            if not widget_found:
                try:
                    is_visible = login_page.is_element_visible("buzz_widget")
                    if is_visible:
                        widget_found = True
                        logging.info("buzz_widget validation passed using login_page")
                except Exception as e:
                    logging.debug(f"Failed to find buzz_widget on login_page: {e}")
            
            # Final assertion
            assert widget_found, f"Widget buzz_widget not visible on any page"
            

            # Final verification
            page.wait_for_timeout(1000)  # Allow UI to settle
            
            logging.info(f"Test valid_login_with_comprehensive_validations completed successfully")
            
        except Exception as e:
            logging.error(f"Test valid_login_with_comprehensive_validations failed: {str(e)}")
            raise
