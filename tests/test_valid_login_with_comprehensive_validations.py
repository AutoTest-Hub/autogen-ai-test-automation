"""
Test Valid Login with Comprehensive Validations
Generated by Enhanced AutoGen Test Creation Agent
Application-Agnostic Test - Works with any web application
"""

import pytest
import logging
from datetime import datetime
from utils.locator_strategy import LocatorStrategy

class TestValidLoginWithComprehensiveValidations:
    """Test class for Valid Login with Comprehensive Validations"""
    
    def test_valid_login_with_comprehensive_validations(self, browser_setup):
        """
        Test: Valid Login with Comprehensive Validations
        Description: Test login with valid credentials and verify all expected elements
        """
        page, browser, context = browser_setup
        
        # Test data from requirements.json
        test_data = {'valid_username': 'Admin', 'valid_password': 'admin123', 'invalid_username': 'InvalidUser', 'invalid_password': 'WrongPassword123', 'base_url': 'https://opensource-demo.orangehrmlive.com'}
        
        # Initialize locator strategy for robust element finding
        locator_strategy = LocatorStrategy(page)
        
        try:
            # Get application URL - no hardcoded fallbacks
            app_url = test_data.get("base_url") or app_data.get("base_url") or app_data.get("url")
            if not app_url:
                raise ValueError("No application URL provided. Please specify base_url in test data or application data.")
            
            # Navigate to application
            page.goto(app_url)
            page.wait_for_load_state("networkidle")
            
            # Execute test steps using LocatorStrategy (no hardcoded page objects)
            # Step 1: Navigate to login page
            # Navigate to application (already done above)
            logging.info("Navigation step completed")
            # Step 2: Enter valid username
            # Enter valid username using LocatorStrategy
            username_value = test_data.get("valid_username") or test_data.get("username")
            if not username_value:
                raise ValueError("Valid username not provided in test data")
            success = locator_strategy.fill("username_field", username_value)
            if not success:
                raise AssertionError("Could not find or fill username field on this application")
            page.wait_for_timeout(200)
            # Step 3: Enter valid password
            # Enter valid password using LocatorStrategy
            password_value = test_data.get("valid_password") or test_data.get("password")
            if not password_value:
                raise ValueError("Valid password not provided in test data")
            success = locator_strategy.fill("password_field", password_value)
            if not success:
                raise AssertionError("Could not find or fill password field on this application")
            page.wait_for_timeout(200)
            # Step 4: Click login button
            # Click login/submit button using LocatorStrategy
            success = locator_strategy.click("login_button")
            if not success:
                raise AssertionError("Could not find or click login button on this application")
            page.wait_for_timeout(1000)  # Wait for login processing

            # Specific validations from requirements.json using LocatorStrategy
            assert "/dashboard" in page.url, "URL should contain '/dashboard'"
            assert locator_strategy.is_visible("user_display"), "User name should be displayed"
            assert locator_strategy.is_visible("logout_button"), "Logout option should be available"
            assert locator_strategy.is_visible("dashboard_content"), "Dashboard should be displayed"

            # Expected result validation: User should be logged in and redirected to dashboard with all navigation elements visible
            assert page.url is not None, "Expected result should be achieved"

            # Final verification
            page.wait_for_timeout(1000)  # Allow UI to settle
            
            logging.info(f"Test valid_login_with_comprehensive_validations completed successfully")
            
        except Exception as e:
            logging.error(f"Test valid_login_with_comprehensive_validations failed: {str(e)}")
            raise
